openapi: 3.0.0
info:
  title: CE Boostup XII - OpenAPI 3.0
  description: Swagger UI for CE Boostup XII API. All patch endpoints are for partial updates, only fields that need to be updated should be included in the request body. All endpoints that require authentication should include the `Authorization` header with the value `Bearer $(token)` and may return 401 and 403 errors.
  version: 0.0.1
servers:
  - url: https://api.ceboostup.com
paths:
  /auth/login:
    post:
      tags:
        - auth
      summary: Login
      description: Login with username and password and get access token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: '67010001@kmitl.ac.th'
                password:
                  type: string
                  example: 'password'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoxLCJlbWFpbCI6IjY3MDEwMDFAa21pdGwuYWMudGgiLCJpYXQiOjE2MjYwNjIwMzcsImV4cCI6MTYyNjA2NTYzN30.7Z6'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Invalid email or password'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Validation error'
                  errors:
                    type: object
                    properties:
                      email:
                        type: array
                        items:
                          type: string
                        example: ['The email field is required.']
                      password:
                        type: array
                        items:
                          type: string
                        example: ['The password field is required.']
  /auth/request-account-creation:
    post:
      tags:
        - auth
      summary: Request account creation
      description: 'Request account creation with email, email will be sent with a link to create an account with the following format: `$(siteUrl)/auth/create-account?token=$(token)`'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: '67010001@kmitl.ac.th'
                siteUrl:
                  type: string
                  format: uri
                  example: 'https://www.ceboostup.com'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Account creation email has been sent'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Invalid email'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Validation error'
                  errors:
                    type: object
                    properties:
                      email:
                        type: array
                        items:
                          type: string
                        example: ['The email field is required.']
                      siteUrl:
                        type: array
                        items:
                          type: string
                        example: ['The site url field is required.']
  /auth/create-account:
    post:
      tags:
        - auth
      summary: Create account
      description: Create account with email, password, and token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                displayName:
                  type: string
                  example: 'John Doe'
                password:
                  type: string
                  example: 'password'
                token:
                  type: string
                  example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9'
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Account has been created'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Invalid token or displayName'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Validation error'
                  errors:
                    type: object
                    properties:
                      displayName:
                        type: array
                        items:
                          type: string
                        example:
                          [
                            'The display name field is required.',
                            'Display name must be at least 3 characters.',
                            'Display name must be at most 16 characters.',
                          ]
                      password:
                        type: array
                        items:
                          type: string
                        example: ['The password field is required.']
                      token:
                        type: array
                        items:
                          type: string
                        example: ['The token field is required.']
  /auth/request-password-reset:
    post:
      tags:
        - auth
      summary: Request password reset
      description: 'Request password reset with email, email will be sent with a link to reset password with the following format: `$(siteUrl)/auth/reset-password?token=$(token)`'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: '67010001@kmitl.ac.th'
                siteUrl:
                  type: string
                  format: uri
                  example: 'https://www.ceboostup.com'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Password reset email has been sent'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Invalid email'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Validation error'
                  errors:
                    type: object
                    properties:
                      email:
                        type: array
                        items:
                          type: string
                        example: ['The email field is required.']
                      siteUrl:
                        type: array
                        items:
                          type: string
                        example: ['The site url field is required.']
  /auth/reset-password:
    post:
      tags:
        - auth
      summary: Reset password
      description: Reset password with email, password, and token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  example: 'password'
                token:
                  type: string
                  example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Password has been reset'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Invalid token'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Validation error'
                  errors:
                    type: object
                    properties:
                      password:
                        type: array
                        items:
                          type: string
                        example: ['The password field is required.']
                      token:
                        type: array
                        items:
                          type: string
                        example: ['The token field is required.']
  /users/{id}:
    get:
      tags:
        - users
      summary: Get user
      description: Get user by id
      security:
        - OAuth2:
            - user
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          schema:
            type: string
            example: '5a69dc5d-ece7-414a-8e89-f7a31741423f'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'User not found'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Validation error'
                  errors:
                    type: object
                    properties:
                      id:
                        type: array
                        items:
                          type: string
                        example: ['The id field must be a string.']
    patch:
      tags:
        - users
      summary: Update user
      description: Update user by id
      security:
        - OAuth2:
            - user
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          schema:
            type: string
            example: '5a69dc5d-ece7-414a-8e89-f7a31741423f'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                displayName:
                  type: string
                  example: 'John Doe'
                group:
                  type: string
                  example: '5a69dc5d-ece7-414a-8e89-f7a31741423f'
                password:
                  type: string
                  example: 'newPassword'
                oldPassword:
                  type: string
                  example: 'oldPassword'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'User has been updated'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'User not found'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Validation error'
                  errors:
                    type: object
                    properties:
                      displayName:
                        type: array
                        items:
                          type: string
                        example:
                          [
                            'The display name field is required.',
                            'Display name must be at least 3 characters.',
                            'Display name must be at most 16 characters.',
                          ]
                      group:
                        type: array
                        items:
                          type: string
                        example: ['The group field must be a string.']
                      password:
                        type: array
                        items:
                          type: string
                        example: ['The password field is required.']
                      oldPassword:
                        type: array
                        items:
                          type: string
                        example: ['The old password field is required.']
  /compile/compile-and-run:
    post:
      tags:
        - compile
      summary: Compile and execute code
      description: Compile and execute code with language, code and input
      security:
        - OAuth2:
            - user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                language:
                  type: string
                  example: 'C11'
                  enum:
                    [
                      'C99',
                      'C11',
                      'C17',
                      'C++11',
                      'C++14',
                      'C++17',
                      'C++20',
                      'C++23',
                      'GNU99',
                      'GNU11',
                      'GNU17',
                      'GNU++11',
                      'GNU++14',
                      'GNU++17',
                      'GNU++20',
                      'GNU++23',
                    ]
                optimizationLevel:
                  type: string
                  example: '1'
                  enum: ['0', 'g', '1', '2', '3', 's', 'fast']
                warningLevel:
                  type: string
                  example: 'extra'
                  enum: ['default', 'all', 'extra', 'pedantic']
                code:
                  type: string
                  example: "#include <stdio.h>\nint main() {\n   printf(\"Hello, World!\");\n   return 0;\n}"
                inputs:
                  type: array
                  items:
                    type: string
                  example: ["12 5\n4", "4 8\n3"]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  runtime:
                    type: number
                    example: 0.01
                  outputs:
                    type: array
                    items:
                      type: object
                    example:
                      [
                        {
                          'complilerOutput': 'Compilation successful',
                          'runtimeOutput': 'Hello, World!',
                          'compilationTime': 0.1,
                          'executionTime': 0.001,
                        },
                        {
                          'complilerOutput': 'Compilation successful',
                          'runtimeOutput': '1 2 4 8 16',
                          'compilationTime': 0.1,
                          'executionTime': 0.001,
                        },
                        {
                          'complilerOutput': 'Banned library used',
                          'runtimeOutput': null,
                          'compilationTime': null,
                          'executionTime': null,
                        },
                      ]
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Executable size limit exceeded'
                  errors:
                    type: array
                    items:
                      type: string
                    example:
                      ['error: Compiled executable size limit exceeded 16 MiB']
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Validation error'
                  errors:
                    type: object
                    properties:
                      language:
                        type: array
                        items:
                          type: string
                        example:
                          [
                            'The language field is required.',
                            'The selected language is invalid.',
                          ]
                      code:
                        type: array
                        items:
                          type: string
                        example: ['The code field is required.']
                      inputs:
                        type: array
                        items:
                          type: string
                        example: ['The inputs field is required.']
  /problems:
    get:
      tags:
        - problems
      summary: Get problems
      description: Get problems with pagination
      security:
        - OAuth2:
            - user
      parameters:
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            example: 1
        - name: perPage
          in: query
          description: Number of problems per page
          required: false
          schema:
            type: integer
            example: 10
        - name: sortBy
          in: query
          description: Sort by field
          required: false
          schema:
            type: string
            example: 'createdAt'
            enum:
              [
                'number',
                'title',
                'difficulty',
                'points',
                'createdAt',
                'updatedAt',
                'solvedAt',
              ]
        - name: sortOrder
          in: query
          description: Sort order
          required: false
          schema:
            type: string
            example: 'asc'
            enum: ['asc', 'desc']
        - name: completionStatus
          in: query
          description: Completion status
          required: false
          schema:
            type: string
            example: 'completed'
            enum: ['Unattempted', 'Attempted', 'Solved']
        - name: search
          in: query
          description: Search keyword
          required: false
          schema:
            type: string
            example: 'A+B'
        - name: tags
          in: query
          description: Tags
          required: false
          schema:
            type: string
            example: 'math,implementation'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  problems:
                    type: array
                    items:
                      $ref: '#/components/schemas/ProblemInfo'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Validation error'
                  errors:
                    type: object
                    properties:
                      page:
                        type: array
                        items:
                          type: string
                        example: ['The page field must be an integer.']
                      perPage:
                        type: array
                        items:
                          type: string
                        example: ['The per page field must be an integer.']
                      sortBy:
                        type: array
                        items:
                          type: string
                        example: ['The selected sortBy is invalid.']
                      sortOrder:
                        type: array
                        items:
                          type: string
                        example: ['The selected sortOrder is invalid.']
                      search:
                        type: array
                        items:
                          type: string
                        example: ['The search field must be a string.']
                      tags:
                        type: array
                        items:
                          type: string
                        example: ['The tags field must be a string.']
    post:
      tags:
        - problems
      summary: Create problem
      description: Create problem title, description, input, output, testcases, allowedHeaders, bannedFunctions, timeLimit, memoryLimit, difficulty, points, optimizationLevel, tags
      security:
        - OAuth2:
            - staff
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: 'A+B Problem'
                description:
                  type: string
                  example: 'Given two integers A and B, your task is to calculate the sum of A and B.'
                input:
                  type: string
                  example: 'The input consists of a single line containing two integers A and B (1 ≤ A, B ≤ 1000).'
                output:
                  type: string
                  example: 'Output a single integer representing the sum of A and B.'
                hint:
                  type: string
                  example: 'Use scanf and printf'
                hintCost:
                  type: integer
                  example: 50
                testcases:
                  type: array
                  items:
                    type: object
                  example:
                    [
                      { 'input': '1 1', 'output': '2' },
                      { 'input': '2 3', 'output': '5' },
                      { 'input': '4 5', 'output': '9' },
                    ]
                exampleTestcases:
                  type: array
                  items:
                    type: object
                  example: [{ 'input': '1 1', 'output': '2' }]
                allowedHeaders:
                  type: array
                  items:
                    type: string
                  example: ['stdio.h', 'iostream']
                bannedFunctions:
                  type: array
                  items:
                    type: string
                  example: ['system', 'for']
                timeLimit:
                  type: number
                  example: 1
                memoryLimit:
                  type: number
                  example: 256
                difficulty:
                  type: integer
                  example: 1
                  enum: [1, 2, 3, 4, 5]
                points:
                  type: integer
                  example: 100
                optimizationLevel:
                  type: string
                  example: '1'
                  enum: ['0', 'g', '1', '2', '3', 's', 'fast']
                attachments:
                  type: array
                  items:
                    type: string
                  example:
                    [
                      '5a69dc5d-ece7-414a-8e89-f7a31741423f',
                      'f531c0e6-c2ab-4bc2-840a-29a05c030104',
                    ]
                tags:
                  type: array
                  items:
                    type: string
                  example: ['math', 'implementation']
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Problem has been created'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Validation error'
                  errors:
                    type: object
                    properties:
                      title:
                        type: array
                        items:
                          type: string
                        example: ['The title field is required.']
                      description:
                        type: array
                        items:
                          type: string
                        example: ['The description field is required.']
                      difficulty:
                        type: array
                        items:
                          type: string
                        example: ['The difficulty field is required.']
                      points:
                        type: array
                        items:
                          type: string
                        example: ['The points field is required.']
                      tags:
                        type: array
                        items:
                          type: string
                        example: ['The tags field is required.']
                      attachments:
                        type: array
                        items:
                          type: string
                        example: ['The attachments field must be a string.']
  /problems/{id}:
    patch:
      tags:
        - problems
      summary: Update problem
      description: Update problem by id
      security:
        - OAuth2:
            - staff
      parameters:
        - name: id
          in: path
          description: Problem id
          required: true
          schema:
            type: string
            example: '5a69dc5d-ece7-414a-8e89-f7a31741423f'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: 'A+B Problem'
                description:
                  type: string
                  example: 'Given two integers A and B, your task is to calculate the sum of A and B.'
                input:
                  type: string
                  example: 'The input consists of a single line containing two integers A and B (1 ≤ A, B ≤ 1000).'
                output:
                  type: string
                  example: 'Output a single integer representing the sum of A and B.'
                hint:
                  type: string
                  example: 'Use scanf and printf'
                hintCost:
                  type: integer
                  example: 50
                testcases:
                  type: array
                  items:
                    type: object
                  example:
                    [
                      { 'input': '1 1', 'output': '2' },
                      { 'input': '2 3', 'output': '5' },
                      { 'input': '4 5', 'output': '9' },
                    ]
                exampleTestcases:
                  type: array
                  items:
                    type: object
                  example: [{ 'input': '1 1', 'output': '2' }]
                allowedHeaders:
                  type: array
                  items:
                    type: string
                  example: ['stdio.h', 'iostream']
                bannedFunctions:
                  type: array
                  items:
                    type: string
                  example: ['system', 'for']
                timeLimit:
                  type: number
                  example: 1
                memoryLimit:
                  type: number
                  example: 256
                difficulty:
                  type: integer
                  example: 1
                  enum: [1, 2, 3, 4, 5]
                points:
                  type: integer
                  example: 100
                attachments:
                  type: array
                  items:
                    type: string
                  example:
                    [
                      '5a69dc5d-ece7-414a-8e89-f7a31741423f',
                      'f531c0e6-c2ab-4bc2-840a-29a05c030104',
                    ]
                publicationStatus:
                  type: string
                  example: 'Published'
                  enum:
                    [
                      'Draft',
                      'AwaitingApproval',
                      'Approved',
                      'Published',
                      'Rejected',
                      'Archived',
                    ]
                tags:
                  type: array
                  items:
                    type: string
                  example: ['math', 'implementation']
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Problem has been updated'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Problem not found'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Validation error'
                  errors:
                    type: object
                    properties:
                      title:
                        type: array
                        items:
                          type: string
                        example: ['The title field is too long.']
    delete:
      tags:
        - problems
      summary: Delete problem
      description: Delete problem by id
      security:
        - OAuth2:
            - staff
      parameters:
        - name: id
          in: path
          description: Problem id
          required: true
          schema:
            type: string
            example: '5a69dc5d-ece7-414a-8e89-f7a31741423f'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Problem has been deleted'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Problem not found'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Validation error'
                  errors:
                    type: object
                    properties:
                      id:
                        type: array
                        items:
                          type: string
                        example: ['The id field must be a string.']
    get:
      tags:
        - problems
      summary: Get problem
      description: Get problem by id
      security:
        - OAuth2:
            - user
      parameters:
        - name: id
          in: path
          description: Problem id
          required: true
          schema:
            type: string
            example: '5a69dc5d-ece7-414a-8e89-f7a31741423f'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Problem not found'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Validation error'
                  errors:
                    type: object
                    properties:
                      id:
                        type: array
                        items:
                          type: string
                        example: ['The id field must be a string.']
  /problems/{id}/hint:
    post:
      tags:
        - problems
      summary: Unlock hint
      description: Unlock hint for problem by id
      security:
        - OAuth2:
            - user
      parameters:
        - name: id
          in: path
          description: Problem id
          required: true
          schema:
            type: string
            example: '5a69dc5d-ece7-414a-8e89-f7a31741423f'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Hint has been unlocked'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Not enough points to unlock hint'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Validation error'
                  errors:
                    type: object
                    properties:
                      id:
                        type: array
                        items:
                          type: string
                        example: ['The id field must be a string.']
  /problems/{id}/submit:
    post:
      tags:
        - problems
      summary: Submit problem
      description: Submit problem by id with code
      security:
        - OAuth2:
            - user
      parameters:
        - name: id
          in: path
          description: Problem id
          required: true
          schema:
            type: string
            example: '5a69dc5d-ece7-414a-8e89-f7a31741423f'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
                  example: "#include <stdio.h>\nint main() {\n   int a, b;\n   scanf(\"%d %d\", &a, &b);\n   printf(\"%d\", a + b);\n   return 0;\n}"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Problem has been submitted successfully'
                  outputCodes:
                    type: array
                    items:
                      type: string
                    example: ['AC', 'AC', 'AC']
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Compilation error'
                  errors:
                    type: array
                    items:
                      type: string
                    example:
                      [
                        'error: Testcase 1: Wrong answer',
                        'error: Testcase 2: Time limit exceeded',
                        'error: Testcase 3: Memory limit exceeded',
                      ]
                  outputCodes:
                    type: array
                    items:
                      type: string
                    example: ['WA', 'TLE', 'MLE']
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Problem not found'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Validation error'
                  errors:
                    type: object
                    properties:
                      code:
                        type: array
                        items:
                          type: string
                        example: ['The code field is required.']
  /problems/{id}/save:
    get:
      tags:
        - problems
      summary: Get saved code for problem
      description: Get saved code for problem by id
      security:
        - OAuth2:
            - user
      parameters:
        - name: id
          in: path
          description: Problem id
          required: true
          schema:
            type: string
            example: '5a69dc5d-ece7-414a-8e89-f7a31741423f'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "#include <stdio.h>\nint main() {\n   int a, b;\n   scanf(\"%d %d\", &a, &b);\n   printf(\"%d\", a + b);\n   return 0;\n}"
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Problem not found'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Validation error'
                  errors:
                    type: object
                    properties:
                      id:
                        type: array
                        items:
                          type: string
                        example: ['The id field must be a string.']
    put:
      tags:
        - problems
      summary: Save code for problem
      description: Save code for problem by id
      security:
        - OAuth2:
            - user
      parameters:
        - name: id
          in: path
          description: Problem id
          required: true
          schema:
            type: string
            example: '5a69dc5d-ece7-414a-8e89-f7a31741423f'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
                  example: "#include <stdio.h>\nint main() {\n   int a, b;\n   scanf(\"%d %d\", &a, &b);\n   printf(\"%d\", a + b);\n   return 0;\n}"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Code has been updated'
        '201':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Code has been saved'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Problem not found'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Validation error'
                  errors:
                    type: object
                    properties:
                      code:
                        type: array
                        items:
                          type: string
                        example: ['The code field is required.']
  /attachments:
    post:
      tags:
        - attachments
      summary: Upload attachment
      description: Upload attachment with file
      security:
        - OAuth2:
            - staff
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                name:
                  type: string
                  example: 'attachment.pdf'
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Attachment has been uploaded'
                  url:
                    type: string
                    format: uri
                    example: 'https://api.ceboostup.com/attachments/f531c0e6-c2ab-4bc2-840a-29a05c030104/attachment.pdf'
                  id:
                    type: string
                    example: 'f531c0e6-c2ab-4bc2-840a-29a05c030104'
        '413':
          description: Payload Too Large
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'File is too large'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Validation error'
                  errors:
                    type: object
                    properties:
                      file:
                        type: array
                        items:
                          type: string
                        example: ['The file field is required.']
  /attachments/{id}:
    get:
      tags:
        - attachments
      summary: Get attachment information
      description: Get attachment information by id
      parameters:
        - name: id
          in: path
          description: Attachment id
          required: true
          schema:
            type: string
            example: '5a69dc5d-ece7-414a-8e89-f7a31741423f'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attachment'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Attachment not found'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Validation error'
                  errors:
                    type: object
                    properties:
                      id:
                        type: array
                        items:
                          type: string
                        example: ['The id field must be a string.']
  /attachments/{id}/{name}:
    get:
      tags:
        - attachments
      summary: Get attachment
      description: Get attachment by id and name, name will be use for download and does not have to match original name
      parameters:
        - name: id
          in: path
          description: Attachment id
          required: true
          schema:
            type: string
            example: '5a69dc5d-ece7-414a-8e89-f7a31741423f'
        - name: name
          in: path
          description: Attachment name
          required: true
          schema:
            type: string
            example: 'attachment.pdf'
      responses:
        '200':
          description: OK
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Attachment not found'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Validation error'
                  errors:
                    type: object
                    properties:
                      id:
                        type: array
                        items:
                          type: string
                        example: ['The id field must be a string.']
                      name:
                        type: array
                        items:
                          type: string
                        example: ['The name field must be a string.']

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
    OAuth2:
      type: oauth2
      flows:
        password:
          tokenUrl: https://api.ceboostup.com/auth/login
          scopes:
            user: User access, only access needed to use the website
            staff: Staff access, access to manage problems
            reviewer: Reviewer access, access to review and approve/reject problems
            admin: Admin access, all access, some restrictions
            owner: Owner access, all access, no restriction
  schemas:
    Group:
      type: object
      properties:
        id:
          type: string
          example: '5a69dc5d-ece7-414a-8e89-f7a31741423f'
        name:
          type: string
          example: 'Penguin'
        logo:
          type: string
          format: uri
          example: 'https://api.ceboostup.com/static/logo.png'
    User:
      type: object
      properties:
        id:
          type: string
          example: '5a69dc5d-ece7-414a-8e89-f7a31741423f'
        displayName:
          type: string
          example: 'John Doe'
        email:
          type: string
          format: email
          example: '67010001@kmitl.ac.th'
        group:
          $ref: '#/components/schemas/Group'
        points:
          type: integer
          example: 700
    Pagination:
      type: object
      properties:
        page:
          type: integer
          example: 1
        perPage:
          type: integer
          example: 10
        total:
          type: integer
          example: 100
    Problem:
      type: object
      properties:
        id:
          type: string
          example: '5a69dc5d-ece7-414a-8e89-f7a31741423f'
        number:
          type: integer
          example: 1
        title:
          type: string
          example: 'A+B Problem'
        description:
          type: string
          example: 'Given two integers A and B, your task is to calculate the sum of A and B.'
        input:
          type: string
          example: 'The input consists of a single line containing two integers A and B (1 ≤ A, B ≤ 1000).'
        output:
          type: string
          example: 'Output a single integer representing the sum of A and B.'
        hint:
          type: string
          example: 'Use scanf and printf'
        hintCost:
          type: integer
          example: 50
        testcases:
          type: array
          items:
            type: object
          example:
            [
              { 'input': '1 1', 'output': '2' },
              { 'input': '2 3', 'output': '5' },
              { 'input': '4 5', 'output': '9' },
            ]
        exampleTestcases:
          type: array
          items:
            type: object
          example: [{ 'input': '1 1', 'output': '2' }]
        allowedHeaders:
          type: array
          items:
            type: string
          example: ['stdio.h', 'iostream']
        bannedFunctions:
          type: array
          items:
            type: string
          example: ['system', 'for']
        timeLimit:
          type: number
          example: 1
        memoryLimit:
          type: number
          example: 256
        difficulty:
          type: integer
          example: 1
          enum: [1, 2, 3, 4, 5]
        points:
          type: integer
          example: 100
        optimizationLevel:
          type: string
          example: '1'
          enum: ['0', 'g', '1', '2', '3', 's', 'fast']
        attachments:
          type: array
          items:
            type: string
          example:
            [
              '5a69dc5d-ece7-414a-8e89-f7a31741423f',
              'f531c0e6-c2ab-4bc2-840a-29a05c030104',
            ]
        createdAt:
          type: string
          format: date-time
          example: '2021-07-01T00:00:00Z'
        updatedAt:
          type: string
          format: date-time
          example: '2021-07-01T00:00:00Z'
        solvedAt:
          type: string
          format: date-time
          example: '2021-07-01T00:00:00Z'
        craetedBy:
          $ref: '#/components/schemas/User'
        credit:
          type: string
          example: 'John Doe'
        tags:
          type: array
          items:
            type: string
          example: ['math', 'implementation']
        passed:
          type: integer
          example: 10
        plubicationStatus:
          type: string
          example: 'Published'
          enum:
            [
              'Draft',
              'AwaitingApproval',
              'Approved',
              'Published',
              'Rejected',
              'Archived',
            ]
        completionStatus:
          type: string
          example: 'Attempted'
          enum: ['Unattempted', 'Attempted', 'Solved']
        savedCode:
          type: string
          example: "#include <stdio.h>\nint main() {\n   int a, b;\n   scanf(\"%d %d\", &a, &b);\n   printf(\"%d\", a + b);\n   return 0;\n}"
    ProblemInfo:
      type: object
      properties:
        id:
          type: string
          example: '5a69dc5d-ece7-414a-8e89-f7a31741423f'
        number:
          type: integer
          example: 1
        title:
          type: string
          example: 'A+B Problem'
        description:
          type: string
          example: 'Given two integers A and B, your task is to calculate the sum of A and B.'
        input:
          type: string
          example: 'The input consists of a single line containing two integers A and B (1 ≤ A, B ≤ 1000).'
        output:
          type: string
          example: 'Output a single integer representing the sum of A and B.'
        hint:
          type: string
          example: 'Use scanf and printf'
        hintCost:
          type: integer
          example: 50
        allowedHeaders:
          type: array
          items:
            type: string
          example: ['stdio.h', 'iostream']
        bannedFunctions:
          type: array
          items:
            type: string
          example: ['system', 'for']
        timeLimit:
          type: number
          example: 1
        memoryLimit:
          type: number
          example: 256
        difficulty:
          type: integer
          example: 1
          enum: [1, 2, 3, 4, 5]
        points:
          type: integer
          example: 100
        optimizationLevel:
          type: string
          example: '1'
          enum: ['0', 'g', '1', '2', '3', 's', 'fast']
        attachments:
          type: array
          items:
            type: string
          example:
            [
              '5a69dc5d-ece7-414a-8e89-f7a31741423f',
              'f531c0e6-c2ab-4bc2-840a-29a05c030104',
            ]
        createdAt:
          type: string
          format: date-time
          example: '2021-07-01T00:00:00Z'
        updatedAt:
          type: string
          format: date-time
          example: '2021-07-01T00:00:00Z'
        solvedAt:
          type: string
          format: date-time
          example: '2021-07-01T00:00:00Z'
        craetedBy:
          $ref: '#/components/schemas/User'
        credit:
          type: string
          example: 'John Doe'
        tags:
          type: array
          items:
            type: string
          example: ['math', 'implementation']
        passed:
          type: integer
          example: 10
        plubicationStatus:
          type: string
          example: 'Published'
          enum:
            [
              'Draft',
              'AwaitingApproval',
              'Approved',
              'Published',
              'Rejected',
              'Archived',
            ]
        completionStatus:
          type: string
          example: 'Attempted'
          enum: ['Unattempted', 'Attempted', 'Solved']
    Attachment:
      type: object
      properties:
        id:
          type: string
          example: '5a69dc5d-ece7-414a-8e89-f7a31741423f'
        url:
          type: string
          format: uri
          example: 'https://api.ceboostup.com/attachments/49c9e215-5df6-4121-88f9-44f79559e912/attachment.pdf'
        type:
          type: string
          example: 'application/pdf'
          enum: ['application/pdf', 'image/png', 'image/jpeg']
        size:
          type: number
          example: 1024
        createdAt:
          type: string
          format: date-time
          example: '2021-07-01T00:00:00Z'
        updatedAt:
          type: string
          format: date-time
          example: '2021-07-01T00:00:00Z'
